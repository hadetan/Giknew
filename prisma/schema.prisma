// Prisma schema for Giknew Phase 1
// Adjust provider or preview features as necessary.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url          = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  telegramId      BigInt    @unique
  githubUserHash  String    @unique
  mode            String    @default("fast") // fast | thinking
  linked          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  installations   Installation[]
  contextMessages ContextMessage[]
  notifications   NotificationLog[]
  staleStates     StalePrState[]
  linkStates      LinkState[]
}

model Installation {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  installationId BigInt
  createdAt      DateTime  @default(now())
  secret         Secret?
  @@index([installationId])
}

model Secret {
  id             Int          @id @default(autoincrement())
  installation   Installation @relation(fields: [installationId], references: [id])
  installationId Int          @unique
  tokenCipher    String
  iv             String
  tag            String
  createdAt      DateTime     @default(now())
}

model ContextMessage {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  threadRootId BigInt
  role         String   // user | assistant | system(optional)
  contentEnc   String
  createdAt    DateTime @default(now())
  @@index([userId, threadRootId, createdAt])
}

model NotificationLog {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  eventType   String
  externalId  String
  sentAt      DateTime @default(now())
  @@index([userId, eventType])
  @@unique([userId, externalId, eventType])
}

model StalePrState {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  repoId          BigInt
  prNumber        Int
  lastNotifiedAt  DateTime @default(now())
  @@unique([userId, repoId, prNumber])
}

model LinkState {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  state      String   @unique
  consumed   Boolean  @default(false)
  createdAt  DateTime @default(now())
  @@index([userId, createdAt])
}

model BannedUser {
  id        Int      @id @default(autoincrement())
  telegramId BigInt  @unique
  createdAt DateTime @default(now())
}
